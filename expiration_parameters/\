#!/bin/bash

import matplotlib.pyplot as plt
import numpy as np

#~~~~~~~~~~~~~~~~~~
# Predator function
#~~~~~~~~~~~~~~~~~~
#
# Take pressure, flow, volume of 5 breaths
# Separate inspiration and expiration
# Normalise each half to 1s and super impose
# Pressure in inspiration takes max, others take mean

def predator(pressures, flows, volumes):

    # Data in form [[set1], [set2], ... , [setn]]
    # Start with first set
    number_of_sets = len(pressures)
    set_count = 0

    new_insp_pressures = [[]]*number_of_sets
    new_exp_pressures = [[]]*number_of_sets
    new_insp_flows = [[]]*number_of_sets
    new_exp_flows = [[]]*number_of_sets
    new_insp_volumes = [[]]*number_of_sets
    new_exp_volumes = [[]]*number_of_sets

    for data in range(number_of_sets):
        # find end of inspiration
        end_insp = 15
        i = end_insp
        while(i < len(flows[data]) - 4):
            if((flows[data][i] < 0.01 or flows[data][i+1] < 0) and flows[data][i+4] < 0.01):
                end_insp = i
                i = len(flows[data])
            i += 1

        # Separate data into two halves
        insp_pressure = pressures[data][:end_insp]
        exp_pressure = pressures[data][end_insp:]
        insp_flow = flows[data][:end_insp]
        exp_flow = flows[data][end_insp:]
        insp_volume = volumes[data][:end_insp]
        exp_volume = volumes[data][end_insp:]

        # normalise data to 1 second
        insp_time = range(len(insp_pressure))
        insp_time = [t/float(insp_time[-1]) for t in insp_time]
        exp_time = range(len(exp_pressure))
        exp_time = [t/float(exp_time[-1]) for t in exp_time]

        # resample at 0.02s intervals
        def resample(points, times, target_time):
            # workout what a value is with linear interpolation between 2 points
            print(points)
            print(times)
            print(target_time)
            m = (points[1] - points[0])/(times[1] - times[0])
            c = points[0]
            x = target_time - times[0]
            y = m*x + c
            return y

        def resampled(datapoints, datatime, interval):
            # resample data at set interval
            dataset = []
            target_time = 0
            index = 1
            t = datatime[index]
            while index <= len(datapoints) and target_time < 1.0:
                if t >= target_time:
                    points = [datapoints[index - 1], datapoints[index]]
                    print(points)
                    times = [datatime[index - 1], datatime[index]]
                    new_sample = resample(points, times, target_time)
                    dataset.append(new_sample)
                    target_time += interval
                    index -= 1
                index += 1
                #if(index < len(datapoints)):
                t = datatime[index]
            return dataset

        interval = 0.01
        new_insp_pressure = resampled(insp_pressure, insp_time, interval)
        new_exp_pressure = resampled(exp_pressure, exp_time, interval)
        new_insp_flow = resampled(insp_flow, insp_time, interval)
        new_exp_flow = resampled(exp_flow, exp_time, interval)
        new_insp_volume = resampled(insp_volume, insp_time, interval)
        new_exp_volume = resampled(exp_volume, exp_time, interval)

        new_insp_time = [t*interval for t in range(len(new_insp_pressure))]
        new_exp_time = [t*interval for t in range(len(new_exp_pressure))]
        print(len(insp_pressure))
        print(len(insp_time))
        print(len(new_insp_pressure))
        print(len(new_insp_time))

        plt.plot(insp_pressure + exp_pressure, 'o-')
        plt.plot(new_insp_pressure + new_exp_pressure, 'o-')

        new_insp_pressures[set_count] = new_insp_pressure
        new_exp_pressures[set_count] = new_exp_pressure
        new_insp_flows[set_count] = new_insp_flow
        new_exp_flows[set_count] = new_exp_flow
        new_insp_volumes[set_count] = new_insp_volume
        new_exp_volumes[set_count] = new_exp_volume
        set_count += 1

    # Super impose data
    max_insp_pressure = np.max(new_insp_pressures, axis=0)
    mean_exp_pressure = np.mean(new_exp_pressures, axis=0)
    mean_insp_flow =  np.mean(new_insp_flows, axis=0)
    mean_exp_flow =  np.mean(new_exp_flows, axis=0)
    mean_insp_volume =  np.mean(new_insp_volumes, axis=0)
    mean_exp_volume =  np.mean(new_exp_volumes, axis=0)

    final_pressure = max_insp_pressure + mean_exp_pressure
    final_flow = mean_insp_flow + mean_exp_flow
    final_volume  = mean_insp_volume + mean_exp_volume

    plt.plot(final_pressure, ':r')
    plt.show()

    return True
